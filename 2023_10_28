//出字符串中第一个匹配项的下标 (前面几次提交错的很迷惑)
int strStr(char* haystack, char* needle) {
    int len_h = 0;
    int len_n = 0;
    while (haystack[len_h] != '\0')
    {
        len_h++;
    }
    while (needle[len_n] != '\0')
    {
        len_n++;
    }
    if (len_h < len_n)
        return -1;
    char arr[len_n+5];
    arr[len_n]='\0';
    int i = 0;
    int j = 0;
    int index = 0;
    int flag = 0;
    while (haystack[i + len_n - 1] != '\0')
    {
        int m = i;
        for (j = 0; j < len_n; j++)
        {
            arr[j] = haystack[m];
            m++;
        }
        if (strcmp(arr, needle) == 0)
        {
            index = i;
            flag = 1;
            break;
        }
        i++;
    }
    if (flag == 0)
        return -1;
    else
    return index;

}

//最后一个单词的长度

int lengthOfLastWord(char * s){
    int index=strlen(s)-1;
    int i=0;
    int count=0;
    for(i=index;i>=0;i--)
    {
        if(count>0&&isspace(s[i]))
        {
            break;
        }
        if(isspace(s[i]))
        {
            continue;
        }
        count++;

    }

return count;
}

//存在重复元素
int compare (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
bool containsDuplicate(int* nums, int numsSize){
    int i=0;
    qsort(nums,numsSize,sizeof(int),compare);
    for(i=0;i<numsSize-1;i++)
    {
        if(nums[i]==nums[i+1])
        return true;
    }
    return false;

}