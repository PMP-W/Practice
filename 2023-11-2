//fib
#define mod 1000000007

int fib(int n){
    if(n<=1)
    return n;
    int a=0;
    int b=1;
    int tmp=0;
    for(int i=2;i<=n;i++)
    {
        tmp=(a+b)%mod;
        a=b;
        b=tmp;
    }
    return tmp;
}
//返回倒数第k个节点
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int kthToLast(ListNode* head, int k) {
        struct ListNode* slow = head;
        struct ListNode* fast = slow;
        while(k--)
        {
            if(fast)
                fast = fast->next;
            else
                return NULL;
        }
         
        while(fast)
        {
            slow = slow->next;
            fast = fast->next;
        }
         
        return slow->val;
    }
};
//打家劫舍||
class Solution {
    #define maxn 1000
    int dp[maxn][2];//max是偷到第几间房位置，列是判断第一间房是否被偷，0是没有被偷，1是被偷
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1)//只有一间房
        return nums[0];
        if(n==2)//有两间房
        return max(nums[0],nums[1]);
        //将环形排列分成两种情况
        //1.第一间房被偷，则第n-1间房一定不会被偷
        //2.第一间房不被偷，则第n-1间房可能会被偷
        dp[0][0]=0;
        dp[0][1]=nums[0];
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<2;j++)
            {
                if(i==1)//对于第二间房是否会被偷
                {
                    if(j==0)
                    {
                        dp[i][j]=nums[1];
                    }
                    else
                    {
                        dp[i][j]=nums[0];
                    }
                }
                else if(i==n-1&&j==1)//第一间房被偷
                {
                    dp[i][j]=dp[i-1][j];
                }
                else//非特殊情况
                {
                    dp[i][j]=max(dp[i-1][j],dp[i-2][j]+nums[i]);
                }
            }
        }
        //返回两种情况下的最大值
        return max(dp[n-1][0],dp[n-1][1]);
    }
};
